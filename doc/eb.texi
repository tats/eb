\input texinfo	        @c -*-texinfo-*-
@c %** start of header
@setfilename eb.info
@settitle EB Library
@c %** end of header

@include eb-ver.texi

@dircategory CD-ROM Book Utilities
@direntry
* eb: (eb).                     C library for accessing CD-ROM book.
@end direntry

@ifinfo
EB Library: C library for accessing CD-ROM book, by Motoyuki Kasahara.

Copyright @copyright{} 1998, 1999  Motoyuki Kasahara

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by Free Software Foundation, Inc.
@end ifinfo

@titlepage
@title EB Library
@subtitle C library for accessing CD-ROM book
@subtitle Edition @value{EDITION} for EB Library version @value{VERSION}
@subtitle @value{UPDATED}
@author by Motoyuki Kasahara

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1998, 1999  Motoyuki Kasahara

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by Free Software Foundation, Inc.
@end titlepage

@node Top, Introduction, (dir), (dir)
@ifinfo
This is edition @value{EDITION}, for EB Library version @value{VERSION}.
This document is not completed.
@end ifinfo

@menu
* Introduction::                Introduction.
* Link::                        Link EB Library to Your Program.
* Initialization::              Initialization.
* Error Handling::              Error Handling.
* Subbook::                     Subbook.
* Search Basics::               Search Basics.
* Word Search::                 Word, End-word, Exact-word Search.

* Index::                       Index.

@detailmenu
 --- The Detailed Node Listing ---

Link EB Library to Your Program

* Compilation::                 Compilation.
* Configuration::               Configuration.
* Character Code::              Character Code Issue.

Initialization

* Compressed Book::             
* Initialization Sample::       Sample Program.
* Initialization Data Types::   Data Types.
* Initialization Functions::    Functions.

Error Handling

* Tolerance to Error::          Tolerance to Error.
* Error Data Types::            Data Types.
* Error Variables::             Global Variables.
* Error Functions::             Functions.
* Error Codes::                 Error Codes.

Subbook

* Current Subbook::             Current Subbook.
* Subbook Sample::              Sample Program.
* Subbook Data Types::          Data Types.
* Subbook Functions::           Functions.

Word, End-Word, Exact-Word Searches

* Get Remained Entries::        Get Remained Entries.
* Word Search Data Types::      Data Types.
* Word Search Functions::       Functions.

Index

* Data Type Index::             Data Type Index.
* Function Index::              Function Index.
* Variable Index::              Variable and Constant Index.
* Program Index::               Sample Program Index.

@end detailmenu
@end menu

@c ===================================================================
@node Introduction, Link, Top, Top
@chapter Introduction

EB Library is a C library for accessing CD-ROM books.
It can be built on UNIX derived systems.
EB Library supports to access CD-ROM books of EB, EBG, EBXA, EBXA-C,
S-EBXA and EPWING formats.
CD-ROM books of those formats are popular in Japan.
Since CD-ROM books themseves are stands on the ISO 9660 format, you can
mount the discs by the same way as other ISO 9660 discs.

EB Library is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

EB Library is distributed in the hope that it will be useful,
but @emph{without any warranty}; without even the implied warranty of
merchantability or fitness for a particular purpose.  See the
GNU General Public License for more details.

This edition corresponds to version @value{VERSION} of EB Library.
This document is not completed.

@c ===================================================================
@node Link, Initialization, Introduction, Top
@chapter Link EB Library to Your Program

This chapter describes how to link EB Library to your program.

@menu
* Compilation::                 Compilation.
* Configuration::               Configuration.
* Character Code::              Character Code Issue.
@end menu

@c -------------------------------------------------------------------
@node Compilation, Configuration, Link, Link
@section Compilation

EB Library consits of some header and library files.
The header files are installed at @file{/usr/local/include/eb},
if you have installed EB Library under @file{/usr/local}, and if you
have not change a directory for header files (@code{includedir}) at
the installation.

Adding lines like the following at the beginning of your C program,
the header files are included.

@example
#include <eb/eb.h>
#include <eb/error.h>
@end example

@noindent
We recommend you to include @file{eb/eb.h} rather than @file{eb.h}.

At compliation, you may have to give the @samp{-I} option to the C
compiler, in order to specify the location of the header files.

@example
cc -I/usr/local/include -c sample.c
@end example

At linkage, you have to add the @samp{-leb} and @samp{-lz} options
(@samp{-lz} links zlib library) to the C compiler.
You may also have to give the @samp{-L} opions to the C compiler,
in order to specify the location of EB Library and zlib.
The library files are installed at @file{/usr/local/lib}, if you
have installed EB Library under @file{/usr/local}, and if you
have not change a directory for library files (@code{libdir}) at the
installation.

Suppose that you have installed both EB Library and zlib library
files at @code{/usr/local/lib}, the command line at linkage is like
as this:

@example
cc sample.o -L/usr/local/lib -leb -lz
@end example

@noindent
For more details, please read the manuals for your C preprocessor, C 
compiler and linker.

@c -------------------------------------------------------------------
@node Configuration, Character Code, Compilation, Link
@section Configuration

The header files in EB Library have some OS and site dependent features
listed as below.
You may have to configure your program about the features.

@table @code
@item const
If the C compiler does not fully support the keyword @code{const},
define @code{const} to be empty, like this:

@example
#define const 
@end example

@noindent
If you are using Autoconf, add @code{AC_C_CONST} to your
@file{configure.in}.

@item off_t
If @code{off_t} is not defined, define @code{off_t} to be
@code{long}, like this:

@example
#define off_t long
@end example

@noindent
If you are using Autoconf, add @code{AC_TYPE_OFF_T} to your
@file{configure.in}.

@item size_t
If @code{size_t} is not defined, define @code{size_t} to be
@code{unsigned}, like this:

@example
#define size_t unsigned
@end example

@noindent
If you are using Autoconf, add @code{AC_TYPE_SIZE_T} to your
@file{configure.in}.

@item ssize_t
If @code{ssize_t} is not defined, define @code{ssize_t} to be
@code{int}, like this:

@example
#define ssize_t int
@end example

@noindent
If you are using Autoconf, add @code{AC_CHECK_TYPE(ssize_t, int)} to
@file{configure.in}.
If your @file{configure.in} contains @code{AC_CONFIG_HEADER} or
@code{AM_CONFIG_HEADER}, also add the following lines to @file{acconfig.h}:

@example
@group
/* Define to `int' if <sys/types.h> doesn't define.  */
#undef ssize_t
@end group
@end example
@end table

@c -------------------------------------------------------------------
@node Character Code,  , Configuration, Link
@section Character Code Issue

In CD-ROM books, books of the EBG format are written in ISO 8859-1, and
others are written in JIS X 0208.
EB Library API (Application Program Interface) uses ISO 8859-1 for EBG,
but uses EUC-JP for other books, not JIS X 0208.
When you give a Japanese string to an EB Library funftion as an argument,
the string must be written in EUC-JP, and when you receive a Japanese
string from an EB Library function, the string is written in EUC-JP.

However, the function @code{eb_rawtext()} doesn't follow the character
code rule.
It returns a string without any conversion.

@c ===================================================================
@node Initialization, Error Handling, Link, Top
@chapter Initialization

In EB Library, all accesses to a CD-ROM book are done through a data
object of the @code{EB_Book} type.

@example
EB_Book book;
@end example

@noindent
Of course, the space of the data object may be allocated by
@code{malloc()}:

@example
EB_Book *book_pointer;

book_pointer = (EB_Book *) malloc(sizeof(EB_Book));
@end example

Since contents of the @code{EB_Book} object (i.e. the contents of the
@code{book} variable, and the space refered by @code{book_pointer}) have
not initialized yet, we initialize the object by the following way:

@example
eb_initialize(&book);
eb_initialize(book_pointer);
@end example

@noindent
Please note that an argument passed to @code{eb_initialize()} is a
pointer to a @code{EB_Book} object, not a @code{EB_Book} object itself.
Many functions in EB Library take a pointer to @code{EB_Book} object
as the first argument.

Then, we bind the @code{EB_Book} object to a CD-ROM book entity.
It is done by the function @code{eb_bind()}.

@example
@group
(EB_Book object)            (CD-ROM book)
  +-------+             +-------------------+
  |       |  eb_bind()  |                   |
  |       |=============|    /mnt/cdrom     |
  +-------+             |                   |
                        +-------------------+
@end group
@end example

@noindent
This is the sample source code of @code{eb_bind()}:

@example
@group
if (eb_bind(&book, "/mnt/cdrom") == -1) @{
    fprintf(stderr, "failed to bind the book\n");
    exit(1);
@}
@end group
@end example

@noindent
The path @file{/mnt/cdrom} is the top directory of the book where the
file @file{CATALOG} or @file{CATALOGS} resides.
When @code{eb_bind()} is failed, it returns -1.
However, meaning of the return value are not important at this point.
Details about error handling are described at @ref{Error Handling}.

Contrary to @code{eb_bind()}, @code{eb_clear()} undoes the binding.
When you close a book, you must invoke @code{eb_clear()} to the 
@code{EB_Book} object bound to the book.
A bound object opens some files and allocates memories internally.
@code{eb_clear()} closes all opened files and release all allocated
memories.

@example
@group
(EB_Book object)            (CD-ROM book)
  +-------+             +-------------------+
  |       |  eb_clear() |                   |
  |       |=           =|    /mnt/cdrom     |
  +-------+             |                   |
                        +-------------------+
@end group
@end example

@noindent
This is the sample source code of @code{eb_clear()}:

@example
eb_clear(&book);
@end example

@noindent
A @code{EB_Book} object whose memories are allocated by @code{malloc()}
can be released by @code{free()} safely when the object is unbound.

@menu
* Compressed Book::             Compressed Book.
* Initialization Sample::       Sample Program.
* Initialization Data Types::   Data Types.
* Initialization Functions::    Functions.
@end menu

@c -------------------------------------------------------------------
@node Compressed Book, Initialization Sample, Initialization, Initialization
@section Compressed Book

EB Library can access a book compressed by the @code{ebzip} command.
Since the library automatically uncompress data, you don't have to
be aware of whether the bound book is compressed or not.

(see @pxref{Compression, , Compression, ebzip, ebzip}, for more details
about compression).

@c -------------------------------------------------------------------
@node Initialization Sample, Initialization Data Types, Compressed Book, Initialization
@section Sample Program

@pindex disctype.c
@include disctype.c.texi

@c -------------------------------------------------------------------
@node Initialization Data Types, Initialization Functions, Initialization Sample, Initialization
@section Data Types

Please include @file{eb/eb.h} to use the data types described in this
section:

@example
#include <eb/eb.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Book

The data type @code{EB_Book} represents a CD-ROM book.
In EB Library, all accesses to the CD-ROM book are done through an
object of this type.
@end deftp

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Disc_Code
@vindex EB_DISC_EB
@vindex EB_DISC_EPWING

The data type @code{EB_Disc_Code} represents a format code of CD-ROM
book.
@code{EB_DISC_EB} and @code{EB_DISC_EPWING} are currently defined as
the format codes.
This type is defined from a signed integral type, so that you can compare
two codes by the @code{==} and @code{!=} binomial operators.
@end deftp

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Character_Code
@vindex EB_CHARCODE_ISO8859_1
@vindex EB_CHARCODE_JISX0208

The @code{EB_Character_Code} type represents a character code used in
a CD-ROM book.
@code{EB_CHARCODE_ISO8859_1} and @code{EB_CHARCODE_JISX0208} are
currently defined as the character codes.
This type is defined from a signed integral type, so that you can compare
two codes by the @code{==} and @code{!=} binomial operators.
@end deftp

@c -------------------------------------------------------------------
@node Initialization Functions,  , Initialization Data Types, Initialization
@section Functions

Please include @file{eb/eb.h} to use the functions described in this
section:

@example
#include <eb/eb.h>
@end example

(@pxref{Error Handling} for more details about error codes and the
global variable @code{eb_error}).

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun void eb_initialize (EB_Book *@var{book})

The function @code{eb_initialize()} initializes an @code{EB_Book} object
pointed by @var{book}.
Each object must be initialized just once, before any other EB Library
function is called to the object.

Don't call another EB Library function to an uninitialized object.
Don't call @code{eb_initialize()} twice to an object.
They may cause memory leak.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_bind (EB_Book *@var{book}, const char *@var{path})

The function @code{eb_bind()} binds an @code{EB_Book} object pointed
by @var{book} to a CD-ROM book on @var{path}.
The path must points to the top directory of the book where the file
@file{CATALOG} or @file{CATALOGS} resides.
If the path may not be started with slash (@code{/}), it is
assumed that the path is relative to the current directory.
The empty path is assumed to be the current directory (@code{.}).
If @var{book} has already bound a book, this function unbinds it,
and then binds the object to the book on @var{path}.

If it succeeds to bind the object, it returns 0.
Otherwise, it returns -1, and sets @code{eb_errno}.
In this case, the object becomes unbound.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun void eb_suspend (EB_Book *@var{book})

The function @code{eb_suspend()} unsets all @dfn{current} status
in an @code{EB_Book} object; unsets the current subbook, current
language, and current font height.
If the @code{EB_Book} object is unbound, or has already been suspended,
this function does nothing.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun void eb_clear (EB_Book *@var{book})

The function @code{eb_clear()} unbinds an @code{EB_Book} object
pointed by @var{book}.
All alocated memories kept in the object are released, and all
file descriptors managed by the object are closed.
The function does nothing to an object which has already been
unbound.
To use the object again, you must call @code{eb_bind()} for it.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_is_bound (EB_Book *@var{book})

The function @code{eb_is_bound()} examines whether @var{book} is bound
or not.
If it is bound, this function returns 1.
Otherwise it returns 0, and it sets @code{eb_error} to
@code{EB_ERR_UNBOUND_BOOK}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_path (EB_Book *@var{book})

The function @code{eb_path()} returns the path of the book bound to
@var{book}.
@var{book} must have been bound beforehand.

The returned path may be different from that specified at
@code{eb_bind()}, since the function always returns the path as
@dfn{canonicalized} form.
The term @dfn{canonicalized} means:

@itemize @bullet
@item
If the relative path has specified at @code{eb_bind()}, it is
converted to the absolute path.
@item
All the @file{/..} in the path specified at @code{eb_bind()}
are converted to straight forms.
@item
All the @file{/.} in the path specified at @code{eb_bind()}
are deleted.
@item
All successive slashes (e.g. @file{//}) are unified.
@item
One or more slashes at the tail of the path are removed.
@end itemize

If succeeds, this function returns the path.
Otherwise, it returns -1 and sets @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun EB_Disc_Code eb_disc_type (EB_Book *@var{book})

The function @code{eb_disc_type()} inspects the format type of @var{book}.
@var{book} must have been bound beforehand.

If the book is EB/EBG/EBXA/EBXA-C/S-EBXA, it returns @code{EB_DISC_EB}.
If the book is EPWING, it returns @code{EB_DISC_EPWING}.
If this function fails, it returns -1 and sets @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun EB_Character_Code eb_character_code (EB_Book *@var{book})

The function @code{eb_character_code()} inspects the character code
in which @var{book} is written.
@var{book} must have been bound beforehand.

If the book is written in ISO 8859-1, it returns
@code{EB_CHARCODE_ISO8859_1}.
If the book is written in JIS X 0208, it returns
@code{EB_CHARCODE_JISX0208}.
If this function fails, it returns -1 and sets @code{eb_error}.
@end deftypefun

@c ===================================================================
@node Error Handling, Subbook, Initialization, Top
@chapter Error Handling

The functions in EB Library set the global variable @code{eb_error},
when they fail to accomplish a job.
The variable @code{eb_error} stores an error code of the last error
raised in EB Library functions.

EB Library has error messages for all error codes.
@code{eb_error_message()} returns the error messages according to
the current value of @code{eb_error}.

@example
@group
fprintf(stderr, "failed to bind a book, %s\n", eb_error_message());
@end group
@end example

If @code{eb_error} has been set to @code{EB_ERR_TOO_LONG_FILENAME}, it
outputs the following error message.

@example
@group
failed to bind a book, too long filename.
@end group
@end example

@menu
* Tolerance to Error::          Tolerance to Error.
* Error Data Types::            Data Types.
* Error Variables::             Global Variables.
* Error Functions::             Functions.
* Error Codes::                 Error Codes.
@end menu

@c -------------------------------------------------------------------
@node Tolerance to Error, Error Data Types, Error Handling, Error Handling
@section Tolerance to Error

An @code{EB_Book} object has some state parameters.
Also whether the object is @dfn{bound} to a CD-ROM book or not is 
one of the paramters.
Some of the functions which take a pointer to an @code{EB_Book} object
as an argument expect that a certain parameter of the referred object
has been set beforehand.
For example, @code{eb_path()} expects that the object is @dfn{bound}.

What's happen if do you give the unbound object to @code{eb_path()}?

@example
EB_Book book;

eb_initialize(&book);
eb_path(&book);        /* What's happen? */
@end example

@noindent
In this case, @code{eb_path()} returns @code{NULL} and sets
@code{eb_error} to @code{EB_ERR_UNBOUND_BOOK}.
Thus, EB library functions precisely reject objects whose required
parameter  is not set.

However, the follwoing action makes your program abort.

@example
eb_path(NULL);    /* abort! */
@end example

@noindent
EB Library functions doesn't inspect whether a pointer given as an
argument is @code{NULL}, unless the function description says that it
accepts @code{NULL}.

@c -------------------------------------------------------------------
@node Error Data Types, Error Variables, Tolerance to Error, Error Handling
@section Data Types

Please include @file{eb/error.h} to use the data types described in this
section:

@example
#include <eb/error.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Error_Code
@vindex EB_NUM_ERRORS

The @code{EB_Error_Code} type represents an error code defined in EB
Library.
EB Library defines @code{EB_NUM_ERRORS} error types.
This type is defined from a signed integral type, so that you can compare
two codes by the @code{==} and @code{!=} binomial operators.
@end deftp

@c -------------------------------------------------------------------
@node Error Variables, Error Functions, Error Data Types, Error Handling
@section Global Variables

Please include @file{eb/error.h} to set and/or refer the variables
described in this section:

@example
#include <eb/error.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypevar EB_Error_Code eb_error

The functions in EB Library set the global variable @code{eb_error},
when the function fails to accomplish a job.
The variable @code{eb_error} stores an error code of the last error
raised in EB Library functions.

The library functions never clears this variable, even when a job is
accomplished without an error.
@code{eb_error} stores the latest error only.
When another error occurs, the library functions ovewrite this variable.
Also you may overwrite the variable in your program.
@end deftypevar

@c -------------------------------------------------------------------
@node Error Functions, Error Codes, Error Variables, Error Handling
@section Functions

Please include @file{eb/error.h} to use the functions described in this
section:

@example
#include <eb/error.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_error_message (void)
@vindex EB_MAXLEN_ERROR_MESSAGE

The function @code{eb_error_message()} returns the error message
according to the current value of @code{eb_error}.
If @code{eb_error} is set to a valid error-code, it returns the
corresponding error message.
Otherwise, it returns the string "unknown error".
The maximum length of the message is @code{EB_MAXLEN_ERROR_MESSAGE}.
This function never changes the value of @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_error_message2 (EB_Error_Code @var{code})
@vindex EB_MAXLEN_ERROR_MESSAGE

The function @code{eb_error_message2()} returns the error message
according to the error code @var{code}.
If @var{code} represents a valid error-code, it returns the corresponding
error message.
Otherwise, it returns the string "unknown error".
The maximum length of the message is @code{EB_MAXLEN_ERROR_MESSAGE}.
This function never changes the value of @code{eb_error}.
@end deftypefun

@c -------------------------------------------------------------------
@node Error Codes,  , Error Functions, Error Handling
@section Error Codes

EB Library defines the following error codes.
Please include @file{eb/error.h} to use the error codes.

@example
#include <eb/error.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_NO_ERR

No error occured.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_MEMORY_EXHAUSTED

EB Library invoked @code{malloc()}, but @code{NULL} was returned.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_EMPTY_FILENAME

This error code is obsoleted.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_TOO_LONG_FILENAME

@code{eb_bind()} or @code{eb_bind_appendix()} failed because the given
filename was too long.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_TOO_LONG_WORD

@code{eb_search_word()}, @code{eb_search_endword()} or 
@code{eb_search_exactword()} failed because the given word was too long.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_BAD_WORD

@code{eb_search_word()}, @code{eb_search_endword()} or 
@code{eb_search_exactword()} failed because the given word had an
invalid character.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_EMPTY_WORD

@code{eb_search_word()}, @code{eb_search_endword()} or 
@code{eb_search_exactword()} failed because the given word was empty.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_GETCWD

@code{getcwd()} or @code{getwd()} failed.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_OPEN_CAT

EB Library failed to open a @file{CATALOG} or @file{CATALOGS} file in
a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_OPEN_CATAPP

EB Library failed to open a @file{CATALOG} or @file{CATALOGS} file in
an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_OPEN_LANG

EB Library failed to open a @file{LANGUAGE} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_OPEN_START

EB Library failed to open a @file{START} or @file{HONMON} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_OPEN_FONT

EB Library failed to open a font file (files at @file{GAIJI} directory)
in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_OPEN_APP

EB Library failed to open an @file{APPENDIX} or @file{FUROKU} file in
an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_READ_CAT

EB Library failed to read a @file{CATALOG} or @file{CATALOGS} file in
an book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_READ_CATAPP

EB Library failed to read a @file{CATALOG} or @file{CATALOGS} file in
an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_READ_LANG

EB Library failed to read a @file{LANGUAGE} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_READ_START

EB Library failed to read a @file{START} or @file{HONMON} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_READ_FONT

EB Library failed to read a font file (files at @file{GAIJI} directory)
in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_READ_APP

EB Library failed to read an @file{APPENDIX} or @file{FUROKU} file in
an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_SEEK_CAT

EB Library failed to seek a @file{CATALOG} or @file{CATALOGS} file in
an book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_SEEK_CATAPP

EB Library failed to seek a @file{CATALOG} or @file{CATALOGS} file in
an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_SEEK_LANG

EB Library failed to seek a @file{LANGUAGE} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_SEEK_START

EB Library failed to seek a @file{START} or @file{HONMON} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_SEEK_FONT

EB Library failed to seek a font file (files at @file{GAIJI} directory)
in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_FAIL_SEEK_APP

EB Library failed to seek an @file{APPENDIX} or @file{FUROKU} file in
an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNEXP_CAT

EB Library happened to meet an unexpected data in a @file{CATALOG} or
@file{CATALOGS} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNEXP_CATAPP

EB Library happened to meet an unexpected data in a @file{CATALOG} or
@file{CATALOGS} file in an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNEXP_LANG

EB Library happened to meet an unexpected data in a @file{LANGUAGE}
file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNEXP_START

EB Library happened to meet an unexpected data in a @file{START} or
@file{HONMON} file in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNEXP_FONT

EB Library happened to meet an unexpected data in a font file
(files at @file{GAIJI} directory) in a book.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNEXP_APP

EB Library happened to meet an unexpected data in an @file{APPENDIX} or
@file{FUROKU} file in an appendix.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNBOUND_BOOK

The invoked EB Library function requires a bound @code{EB_Book} object
as an argument, but the given object was not bound.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_UNBOUND_APP

The invoked EB Library function requires a bound @code{EB_Appendix}
object as an argument,but the given object was not bound.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_LANG

The book had no language data.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUB

The book had no subbook.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_APPSUB

The appendix had no subbook.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_MSG

The current language in a book had no message.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_FONT

The current subbook in a book had no font.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_START

The current subbook in a book didn't have a @file{START} nor @file{HONMON}
file.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_CUR_LANG

The invoked function requires that an @code{EB_Book} object given as an
argument had set the current language, but the given book didn't not set
it.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_CUR_SUB

The invoked function requires that an @code{EB_Book} object given as an
argument had set the current subbook, but the given book didn't set it.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_CUR_APPSUB

The invoked function requires that an appendix given as an argument had
set the current subbook, but the given appendix didn't set it.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_CUR_FONT

The invoked function requires that an @code{EB_Book} object given as an
argument had set the current font height, but the given book didn't set
it.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_LANG

An @code{EB_Book} object and a language code were given to a function,
but the bound book didn't have the language with the code.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_SUB

An @code{EB_Book} object and a subbook code were given to a function,
but the bound book didn't have the subbook with the code.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_APPSUB

An @code{EB_Appendix} object and a subbook code were given to a function,
but the bound appendix didn't have the subbook with the code.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_MSG

An @code{EB_Book} object and a message code were given to a function,
but the currnet language of the bound book the object didn't have
the message with the code.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_FONT

An @code{EB_Book} object and a font ehgiht were given to a function,
but the currnet subbook of the bound book didn't have the font with the
height.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_CHAR_BMP

An @code{EB_Book} object and a character number was given to a function,
but the current subbook of the bound book didn't have bitmap data of the
character number.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_CHAR_TEXT

An @code{EB_Appendix} object and a character number was given to a
function, but the current subbook of the bound appendix didn't have
an alternation string of the character number.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_SEARCH

@code{eb_search_word()}, @code{eb_search_endword()} or 
@code{eb_search_exactword()} failed because the book didn't support
the search method.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_HOOK

An invalid hook code was given to a function.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_HOOK_WORKSPACE

An hook function returned -1.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_DIFF_CONTENT

A continuation of getting text contetns was requested, but the content
type was different from that given at the previous call.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_DIFF_SUBBOOK 

The @code{EB_Book} object was given to @code{eb_hit_list()},
@code{eb_heading()}, @code{eb_rawtext()} or @code{eb_text()}, but the
current subbook was different from that given at the previous call.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_DIFF_BOOK

The @code{EB_Book} object was given to @code{eb_hit_list()},
@code{eb_heading()}, @code{eb_rawtext()} or @code{eb_text()}, but the
object was different from that given at the previous call.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_PREV_SEARCH

You invoked @code{eb_hit_list()}, but you had not invoked
@code{eb_search_word()}, @code{eb_search_endword()} nor 
@code{eb_search_exactword()} beforehand.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_PREV_CONTENT

You invoked @code{eb_text()}, @code{eb_heading()} or @code{eb_rawtext()}
but you had not invoked @code{eb_seek()} beforehand.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_MULTI_ID

An @code{EB_Book} object and a multi search code was given to a function,
but the current subbook of the bound book didn't have a multi search
with the code.
@end defvr

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@defvr Constant EB_ERR_NO_SUCH_ENTRY_ID

An @code{EB_Book} object and a mulit search entry code was given to a
function, but the current subbook of the bound book didn't have a multi
search entry with the code.
@end defvr

@c ===================================================================
@node Subbook, Search Basics, Error Handling, Top
@chapter Subbook

A CD-ROM book usually has some @dfn{subbooks}.
For example, a certain CD-ROM book has three subbooks; Japanese
dictionary, English dictinary and Encyclopedia.
Each subbook itself is an independent @dfn{book}.

@example
@group
           (CD-ROM book)
+---------------------------------+
| [Japanese Dicctionary](subbook) |
|                                 |
| [English Dicctionary] (subbook) |
|                                 |
| [Encyclopedia]        (subbook) |
+---------------------------------+
@end group
@end example

@noindent
EB Library assigns a @dfn{subbook code} to each subbook.
EB Library uses the code to identify a subbook, so that each subbook
code is unique in a book.
The type @code{EB_Subbook_Code} represents the subbook code.
@code{eb_subbook_list()} returns a list of subbook codes of all subbooks
in a book.
The following source code is an example of @code{eb_subbook_list()}.

@example
@group
/* It assumes that @code{book} is a variable of @code{EB_Book} and */
/* it has already been bound to a book.                  */
EB_Subbook_Code subbook_codes[EB_MAX_SUBBOOKS];
int count, i;

count = eb_subbook_list(&book, subbook_codes);
if (count == -1) @{
    fprintf(stderr, "failed to get a subbook list, %s\n",
        eb_error_message());
@}
@end group
@end example

If @code{eb_subbook_list()} succeeds, the subbook list is stored into
@code{subbook_codes}.
The subbook code of the first subbook in the list is represented as
@code{subbook_codes[0]}, the next code is represented as 
@code{subbook_codes[1]}, and so on.
The last code is represented as @code{subbook_codes[count -1]},
because @code{eb_subbook_list()} returns the number of subbooks in
the book.
For example, you can get the title of the first subbook by the
following way.

@example
title = eb_subbook_title2(&book, subbook_codes[0]);
@end example

@menu
* Current Subbook::             Current Subbook.
* Subbook Sample::              Sample Program.
* Subbook Data Types::          Data Types.
* Subbook Functions::           Functions.
@end menu

@c -------------------------------------------------------------------
@node Current Subbook, Subbook Sample, Subbook, Subbook
@section Current Subbook

Only one subbook may becomes the @dfn{current subbook} in a book
at the same time.
Most operations, such as searching a word and getting text, are
permitted to the current subbook only.
The function @code{eb_set_subbook()} sets the current subbook to
the specified subbook.

@example
@group
(EB_Book object)                        (CD-ROM book)
  +-------+                  +---------------------------------+
  |current|                  | [Japanese Dicctionary](subbook) |
  |subbook| eb_set_subbook() |                                 |
  |   *----------------------->[English Dicctionary] (subbook) |
  |       |                  |                                 |
  +-------+                  | [Encyclopedia]        (subbook) |
                             +---------------------------------+
@end group
@end example

@noindent
At the initial state, no subbok is selected as the current subbook.

@code{eb_set_subbook()} takes a subbook code as an argument.
If the function succeeds, the subbook of the code is set to the current
subbook.
The following source code is an example of @code{eb_set_subbook()}.

@example
@group
/* It assumes that @code{book} is a variable of @code{EB_Book} and */
/* it has already been bound to a book.                  */
EB_Subbook_Code subbook_codes[EB_MAX_SUBBOOKS];
int count, i;

count = eb_subbook_list(&book, subbook_codes);
if (count == -1) @{
    /* eb_subbook_list() is failed */
@}

for (i = 0; i < count; i++) @{
    if (eb_set_subbook(&book, subbook_codes[i]) == -1) @{
        /* eb_set_subbook() is failed */
    @}
@}
@end group
@end example

@c -------------------------------------------------------------------
@node Subbook Sample, Subbook Data Types, Current Subbook, Subbook
@section Sample Program

@pindex subbook.c
@include subbook.c.texi

@c -------------------------------------------------------------------
@node Subbook Data Types, Subbook Functions, Subbook Sample, Subbook
@section Data Types

Please include @file{eb/eb.h} to use the data types described in this
section:

@example
#include <eb/eb.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Subbook_Code

The @code{EB_Subbook_Code} data type represents a subbook code.
Each subbook in a book has an unique subbook code.
This type is defined from a signed integral type, so that you can compare
two codes by the @code{==} and @code{!=} binomial operators.
@end deftp

@c -------------------------------------------------------------------
@node Subbook Functions,  , Subbook Data Types, Subbook
@section Functions

Please include @file{eb/eb.h} to use the functions described in this
section:

@example
#include <eb/eb.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_initialize_all_subbooks (EB_Book *@var{book})

The function @code{eb_initialize_all_subbooks()} initializes all subbooks
in @var{book}.
@var{book} must have been bound beforehand.

Usually, initialization of a subbook is done at the first time the subbook
is set as the current subbook.
The function does the initialization in advance.
This function is usuful for standalone server applications.
Call @code{eb_initialize_all_subbooks()} before accepting connections from
clients.
When a connected client requests to set a subbook, the server can respond
to the request faster than usual because the initialization of the subbook
has already been done.

If succeeds, it returns the number of subbooks in @var{book}.
Otherwise, it returns -1 and sets @code{eb_error}.
This function never changes the current subbook of @var{book}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_subbook_count (EB_Book *@var{book})

The function @code{eb_subbook_count()} gets the number of subbooks in
@var{book}.
@var{book} must have been bound beforehand.

If succeeds, it returns the number of subbooks.
Otherwise, it returns -1 and sets @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_subbook_list (EB_Book *@var{book}, EB_Subbook_Code *@var{list})
@vindex EB_MAX_SUBBOOKS

The function @code{eb_subbook_list()} makes a list of the subbook codes
of the subbooks in @var{book}.
@var{book} must have been bound beforehand.
This function puts the generated list into @var{list} as an array of
@code{EB_Subbook_Code}.
The array contains @code{EB_MAX_SUBBOOKS} elements maximum.

If succeeds, it returns the number of subbooks in @var{book}.
Otherwise, it returns -1 and sets @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun EB_Subbook_Code eb_subbook (EB_Book *@var{book})

The function @code{eb_subbook()} gets the subbook code of the current
subbook of @var{book}.
The current subbook of @var{book} must have been set beforehand.

If succeeds, it returns the number of subbooks in @var{book}.
Otherwise, it returns -1 and sets @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_subbook_title (EB_Book *@var{book})
@vindex EB_MAXLEN_TITLE

The function @code{eb_subbook_title()} gets the title of the current
subbook of @var{book}.
The current subbook of @var{book} must have been set beforehand.
The length of the title string is @code{EB_MAXLEN_TITLE} maximum.
The length doesn't count the terminating NUL character.
The title is written in EUC-JP or ISO 8859-1.

If succeeds, it returns the title (e.g. "English Japanese Dictionary").
Otherwise, it returns @code{NULL} and sets @code{eb_error}.

Please note that the title returned from this function is a constant
string kept in @var{book}.
When @var{book} becomes unbound (i.e. call @code{eb_clear} for @var{book}),
also the title string is destroyed.
Accordingly, you must not refer to the title in the unbound book.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_subbook_title2 (EB_Book *@var{book}, EB_Subbook_Code @var{code})

The function @code{eb_subbook_title2()} is the same as
@code{eb_subbook_title()}, except that it returns the title of the
subbook specified at the argument @var{code}.
The current subbook of @var{book} may be unset, but @var{book} must
have been bound beforehand.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_subbook_directory (EB_Book *@var{book})
@vindex EB_MAXLEN_BASENAME

The function @code{eb_subbook_directory()} gets the directory name of
the current subbook of @var{book}.
The current subbook of @var{book} must have been set beforehand.
All files which belong to the current subbook are resides under the
directory relative to the top directory of the CD-ROM book.
The length of the directory name is @code{EB_MAXLEN_BASENAME} maximum.
The length doesn't count the terminating NUL character.
The directory name consists of `d' characters (space, digit, upper case
letter, and underscore) defined in ISO 9660.

If succeeds, it returns the directory name (e.g. "JPDICT").
Otherwise, it returns @code{NULL} and sets @code{eb_error}.

Please note that the directory name returned from this function is a
constant string kept in @var{book}.
When @var{book} becomes unbound (i.e. call @code{eb_clear} for @var{book}),
also the directory name is destroyed.
Accordingly, you must not refer to the directory name in the unbound book.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun {const char *} eb_subbook_directory2 (EB_Book *@var{book}, EB_Subbook_Code @var{code})

The function @code{eb_subbook_directory2()} is the same as
@code{eb_subbook_directory()}, except that it returns the directory name
of the subbook specified at the argument @var{code}.
The current subbook of @var{book} may be unset, but @var{book} must
have been bound beforehand.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_set_subbook (EB_Book *@var{book}, EB_Subbook_Code @var{code})

The function @code{eb_set_subbook()} sets the current subbook of @var{book}
to @var{code}.
@var{book} must have been bound beforehand.
When the current subbook has already been set to the specified subbook,
this function unsets the current subbook, and then it sets the current
subbook to @var{code}.

If succeeds, it returns 0.
Otherwise, it returns -1, sets @code{eb_error}, and unsets the current
subbook.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun void eb_unset_subbook (EB_Book *@var{book})

The function @code{eb_unset_subbook()} unsets the current subbook of
@var{book}.
If @var{book} is unbound, or if the current subbook has not been set,
this function does nothing.
@end deftypefun

@c ===================================================================
@node Search Basics, Word Search, Subbook, Top
@chapter Search Basics

Search is most significant function in CD-ROM book.
The following search methos are currently defined:

@table @asis
@item word search
Search for entires whose heads are matched to the given word.

@item end-word search
Search for entires whose tails are matched to the given word.

@item exact-word search
Search for entires that matches exactly to the given word.

@item keyword search
@itemx multi search
Search for entires related to the given keywords.
(EB Library doesn't support these methods yet.)

@item graphic search
Clickable image map.
(EB Library doesn't support this method yet.)

@item menu search
Menu.
@end table

@c ===================================================================
@node Word Search, Index, Search Basics, Top
@chapter Word, End-Word, Exact-Word Searches

Word search, end-word search, and exact-word search are search methods
to search the current subbook for entires matched to the given word.
Word search looks for entires whose heads are matched to the given word.
End-word search looks for entires whose tails are matched to the given
word.
Exact-word search looks for entires that matches exactly to the given
word.

The following is an example of word search.
It searches for entries beginning with @samp{librar}.

@example
#define MAX_HITS    50

/* It assumes that @code{book} is a variable of @code{EB_Book} and */
/* it has already set the current subbook.               */
EB_Hit hits[MAX_HITS];
int hitcount;

if (eb_search_word(&book, "librar") == -1) @{
    fprintf(stderr, "an error occurs.\n");
    exit(1);
@}
hitcount = eb_hit_list(&book, hits, MAX_HITS);
if (hitcount == -1) @{
    fprintf(stderr, "an error occurs.\n");
    exit(1);
@}
@end example

@noindent
The function @code{eb_search_word()} requests a word search.
But, the function doesn't return a hit entry.
It is done by @code{eb_hit_list()}.
@code{eb_hit_list()} records hit entries onto @code{hits}, and it
returns the number of hit entries recorded onto @code{hits}.
In this example, @code{eb_hit_list()} gets @code{MAX_HITS} (= 50)
entries maximum.

If the current subbook is English dictionary, we will get at least
two entries; @samp{library} and @samp{librarian}.

@example
@group
+-------------+-------------+---
| (librarian) |  (library)  |   
+-------------+-------------+---
    hits[0]       hits[1]
@end group
@end example

@noindent
(The order of the @samp{library} and @samp{librarian} entries may be
different from the above picture.)

Each element in @code{hits} holds positions of @dfn{heading} and
@dfn{text} of the hit entry.

@example
@group
                     heading
                   +-----------+
              +--->| librarian |
+----------+  |    +-----------+
| heading ----+      text
|          |       +-------------------------------------+
|    text -------->| librarian                           |
+----------+       | n. (1) A person who is a specialist |
   hits[0]         | in library work. (2) ...            |
                   +-------------------------------------+
@end group
@end example

@noindent
In other words, the element doesn't have heading and text themselves.
This chapter doesn't explain how to get heading and text.
@c @xref{}.

@menu
* Get Remained Entries::        Get Remained Entries.
* Word Search Data Types::      Data Types.
* Word Search Functions::       Functions.
@end menu

@c -------------------------------------------------------------------
@node Get Remained Entries, Word Search Data Types, Word Search, Word Search
@section Get Remained Entries

As mentioned before, the second argument to @code{eb_hit_list()} is
the maximum number of hit entries to be gotten.
In the following example, we get only @code{MAX_HITS} entries maximum,
even if more entries are matched:

@example
hitcount = eb_hit_list(&book, hits, MAX_HITS);
@end example

@noindent
To get the remained entries, please invoke @code{eb_hit_list()}
repeatedly until it returns 0:

@example
@group
for (;;) @{
    hitcount = eb_hit_list(&book, hits, MAX_HITS);
    if (hitcount == 0) @{
        break;
    @} else if (hitcount == -1) @{
        fprintf(stderr, "an error occurs.\n");
        exit(1);
    @}
    /* show headings of hit entires */
@}
@end group
@end example

However, the actions described below reset internal repetition status
of @code{eb_hit_list()}.
After the reset, you cannot get the remained entires any longer.

@itemize @bullet
@item Call one of the following functions for the @code{EB_Book} object.
@itemize @minus
@item @code{eb_set_subbook()}
@item @code{eb_unset_subbook()}
@item @code{eb_set_all_subbooks()}
@item @code{eb_bind()}
@item @code{eb_clear()}
@item @code{eb_suspend()}
@end itemize

@item Call one of the following functions for @emph{any} @code{EB_Book}
object.
@itemize @minus
@item @code{eb_search_word()}
@item @code{eb_search_endword()}
@item @code{eb_search_exactword()}

@item Call one of the following functions for another @code{EB_Book}
object.
@item @code{eb_hit_list()} (see below)
@end itemize
@end itemize

@noindent
If you invoke @code{eb_hit_list()} for an @code{EB_Book} object
different from that specified at the previous call, an error occurs.
In this case, the function returns -1 and it sets @code{eb_error}.

The internal repetition status is also reset when @code{eb_hit_list()}
fails (i.e. it returns -1).

@c -------------------------------------------------------------------
@node Word Search Data Types, Word Search Functions, Get Remained Entries, Word Search
@section Data Types

Please include @file{eb/eb.h} to use the data types described in this
section:

@example
#include <eb/eb.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Hit

The data type @code{EB_Hit} represents a hit entry of the search.
This data type is defined as:

@example
@group
typedef struct @{
    EB_Position heading;
    EB_Position text;
@} EB_Hit;
@end group
@end example

@noindent
You may access and set the members in this type directly.
@end deftp

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftp {Data type} EB_Position

The data type @code{EB_Position} represents a position in subbook
contents.
This data type is defined as:

@example
@group
typedef struct @{
    int page;
    int offset;
@} EB_Position;
@end group
@end example

@noindent
You may access and set the members in this type directly.
@end deftp

@c -------------------------------------------------------------------
@node Word Search Functions,  , Word Search Data Types, Word Search
@section Functions

Please include @file{eb/eb.h} to use the functions described in this
section:

@example
#include <eb/eb.h>
@end example

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_have_exactword_search (EB_Book *@var{book})

The function @code{eb_have_exactword_search()} returns 1 if the current
subbook of @var{book} has the exact word search method. 
It returns 0 and sets @code{eb_error} to @code{EB_ERR_NO_SUCH_SEARCH}
if the current subbook doesn't have the method, or if the current subbook
is not set.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_search_exactword (EB_Book *@var{book}, const char *@var{inputword})

The function @code{eb_search_exactword()} searches the current subbook
of @var{book} for entries matched exactly to @var{inputword}.
The current subbook must have been set beforehand.
The @var{inputword} must be written in EUC-JP or ISO 8859-1 according
with the character code of @var{book}.

This function only sends a search request to EB Library.
It doesn't return a hit entires.
Hit entries are gotten by @code{eb_hit_list()}.

If succeeds, it returns 0.
Otherwise, it returns -1, and sets @code{eb_error}.
subbook.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_have_word_search (EB_Book *@var{book})

The function @code{eb_have_word_search()} returns 1 if the current
subbook of @var{book} has the word search method.
It returns 0 and sets @code{eb_error} to @code{EB_ERR_NO_SUCH_SEARCH}
if the current subbook doesn't have the method, or if the current subbook
is not set.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_search_word (EB_Book *@var{book}, const char *@var{inputword})

The function @code{eb_search_word()} searches the current subbook
of @var{book} for entries whose heads are matched to @var{inputword}.
The current subbook must have been set beforehand.
The @var{inputword} may be written in EUC-JP or ISO 8859-1 according
with the character code of @var{book}.

This function only sends a search request to EB Library.
It doesn't return a hit entires.
Hit entries are gotten by @code{eb_hit_list()}.

If succeeds, it returns 0.
Otherwise, it returns -1, and sets @code{eb_error}.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_have_endword_search (EB_Book *@var{book})

The function @code{eb_have_endword_search()} returns 1 if the current
subbook of @var{book} has the end word search method.
It returns 0 and sets @code{eb_error} to @code{EB_ERR_NO_SUCH_SEARCH}
if the current subbook doesn't have the method, or if the current subbook
is not set.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_search_endword (EB_Book *@var{book}, const char *@var{inputword})

The function @code{eb_endsearch_word()} searches the current subbook
of @var{book} for entries whose tails are matched to @var{inputword}.
The @var{inputword} may be written in EUC-JP or ISO 8859-1 according
with the character code of @var{book}.

This function only sends a search request to EB Library.
It doesn't return a hit entires.
Hit entries are gotten by @code{eb_hit_list()}.

If succeeds, it returns 0.
Otherwise, it returns -1, and sets @code{eb_error}.
subbook.
@end deftypefun

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@deftypefun int eb_hit_list (EB_Book *@var{book}, EB_Hit *@var{hits}, int @var{maxhits})

The function @code{eb_hit_list()} gets hit entries of 
@code{eb_search_exactword()}, @code{eb_search_word()}, or
@code{eb_search_endword()} that was called beforehand.
Accordingly, you must have call one of these function successfully
before call this function.
Otherwise, this function fails.

@var{book} passed to @code{eb_hit_list()} and passed to
@code{eb_search_exactword()} (or @code{eb_search_word()} or
@code{eb_search_endword()}) must be the same.
This function fails if you give a different @code{EB_Book} object to
@code{eb_hit_list()}.

@code{eb_hit_list()} puts @var{maxhits} hit entries maximum into
@var{hits}.
If @code{eb_hit_list()} finds more hit entries, it gets first
@var{maxhits} entries.
You can get remained entries by invoking @code{eb_hit_list()} repeatedly
until it returns 0 (@pxref{Get Remained Entries}).

If succeeds, this function returns the number of entries recorded onto
@var{hits}.
Otherwise, it returns -1, and sets @code{eb_error}.
@end deftypefun

@c ===================================================================
@node Index,  , Word Search, Top
@appendix Index

@menu
* Data Type Index::             Data Type Index.
* Function Index::              Function Index.
* Variable Index::              Variable and Constant Index.
* Program Index::               Sample Program Index.
@end menu

@c -------------------------------------------------------------------
@node Data Type Index, Function Index, Index, Index
@section Data Type Index

@printindex tp

@c -------------------------------------------------------------------
@node Function Index, Variable Index, Data Type Index, Index
@section Function Index

@printindex fn

@c -------------------------------------------------------------------
@node Variable Index, Program Index, Function Index, Index
@section Variable and Constatnt Index

@printindex vr

@c -------------------------------------------------------------------
@node Program Index,  , Variable Index, Index
@section Sample Program Index

@printindex pg

@c -------------------------------------------------------------------
@contents
@bye
